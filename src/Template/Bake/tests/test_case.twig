{#
/**
 * Test Case bake template
 *
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @since         2.0.0
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */
#}
{% set isController = type|lower == 'controller' %}
{% set isShell = type|lower == 'shell' %}
{% set isTable = type|lower == 'table' %}

{% set isCommand = type|lower == 'command' %}
{% if isController %}
    {%- set traitName = 'IntegrationTestTrait' %}
{% elseif isShell or isCommand %}
    {%- set traitName = 'ConsoleIntegrationTestTrait' %}
{% endif %}
{%- set uses = uses|merge(["Cake\\TestSuite\\TestCase"]) %}
{% if traitName %}
    {%- set uses = uses|merge(["Cake\\TestSuite\\#{traitName}"]) %}
{% endif %}

{%- set uses = uses|sort %}
<?php
namespace {{ baseNamespace }}\Test\TestCase\{{ subNamespace }};

use Cake\Log\Log;
{% for dependency in uses %}
use {{ dependency }};
{% endfor %}

/**
 * {{ fullClassName }} Test Case
{% if isController or isCommand %}
 *
 * @uses \{{ fullClassName }}
{% endif %}
 */
class {{ className }}Test extends TestCase
{
{% if traitName %}
    use {{ traitName }};
{% if properties or fixtures or construction or methods %}

{% endif %}
{% endif %}
{% if properties %}
{% for propertyInfo in properties %}
{% if loop.index > 1 %}

{% endif %}
    /**
     * {{ propertyInfo.description }}
     *
     * @var {{ propertyInfo.type }}
     */
    public ${{ propertyInfo.name }}{% if propertyInfo.value is defined and propertyInfo.value %} = {{ propertyInfo.value }}{% endif %};
{% if loop.last and (fixtures or construction or methods) %}

{% endif %}
{% endfor %}
{% endif %}

{%- if fixtures %}
    /**
     * Fixtures
     *
     * @var array
     */
    public $fixtures = [{{ Bake.stringifyList(fixtures|values)|raw }}];
{% if construction or methods %}

{% endif %}
{% endif %}

{%- if construction %}
    /**
     * setUp method
     *
     * @return void
     */
    public function setUp()
    {
        parent::setUp();
{% if preConstruct %}
        {{ preConstruct|raw }}
{% endif %}
{% if isCommand %}
        {{ construction|raw }}
{% else %}
        $this->{{ (subject ~ ' = ' ~ construction)|raw }}
{% endif %}
{% if postConstruct %}
        {{ postConstruct|raw }}
{% endif %}
    }
{% if not isCommand %}

    /**
     * tearDown method
     *
     * @return void
     */
    public function tearDown()
    {
        unset($this->{{ subject }});

        parent::tearDown();
    }
{% if methods %}

{% endif %}
{% endif %}
{% endif %}

{%- for method in methods %}
{% if loop.index > 1 %}

{% endif %}
    /**
     * Test {{ method }} method
     *
     * @return void
     */
    public function test{{ method|camelize }}()
    {
        Log::write('debug', 'inside {{ className }} test{{ method|camelize }} ');

{% if isController %}
        $url = [
            'prefix' => false,
            'plugin' => false,
            'controller' => 'controller',
            'action' => '{{ method }}',
            1,
        ];
{% if  method|camelize == 'index' %}
        $url = [
            'prefix' => false,
            'plugin' => false,
            'controller' => 'controller',
            'action' => '{{ method }}',
        ];
        $this->get($url);
        $this->assertResponseCode(200);
{% endif %}
{% if  method|camelize == 'view' %}
        $url = [
            'prefix' => false,
            'plugin' => false,
            'controller' => 'controller',
            'action' => '{{ method }}',
            1,
        ];
        $this->get($url);
        $this->assertResponseCode(200);
{% endif %}
{% if  method|camelize == 'edit' %}
        $url = [
            'prefix' => false,
            'plugin' => false,
            'controller' => 'controller',
            'action' => '{{ method }}',
            1,
        ];
        $this->get($url);
        $this->assertResponseCode(200);

        $data = [];
        $this->post($url, $data);
        $this->assertResponseCode(302);
        //$this->asserRedirectContains('/index');
{% endif %}
{% if  method|camelize == 'add' %}
        $url = [
            'prefix' => false,
            'plugin' => false,
            'controller' => 'controller',
            'action' => '{{ method }}',
            1,
        ];
        $this->get($url);
        $this->assertResponseCode(200);

        $data = [];
        $this->post($url, $data);
        $this->assertResponseCode(302);
        //$this->asserRedirectContains('/index');
{% endif %}
{% if  method|camelize == 'delete' %}
        $url = [
            'prefix' => false,
            'plugin' => false,
            'controller' => 'controller',
            'action' => '{{ method }}',
            1,
        ];
        $this->post($url);
        $this->assertResponseCode(302);
        //$this->asserRedirectContains('/index');
{% endif %}

{% endif %}
{% if isTable %}
{% if  method|camelize == 'Initialize' %}
        $associations = $this->{{ name }}->associations();
        // $this->assertCount(9994, $associations); // 4 plus version plugins
        $this->assertNotNull($this->{{ name }}->association('associationName'));

        // Test behaviors
        $this->assertEquals(999, $this->{{ name }}->behaviors()->count());
        $this->assertNotNull($this->{{ name }}->behaviors()->get('behaviorName'));
{% endif %}

{% if  method|camelize == 'ValidationDefault' %}
        $entity = $this->_validDefault();
        $data = [];
        $entityTwo = $this->{{ name }}->newEntity(
            $data,
            [
                'fields' => array_keys($data)
            ]
        );
        Log::write('debug', 'errors next');
        Log::write('debug', $entityTwo->getErrors());
        $this->assertCount(9999, $entityTwo->getErrors()); // empty = no validation errors
{% endif %}

{% if  method|camelize == 'BuildRules' %}
        $entity = $this->_validDefault();
        $data = [];
        $entityTwo = $this->{{ name }}->newEntity(
            $data,
            [
                'fields' => array_keys($data)
            ]
        );
        Log::write('debug', 'errors next');
        Log::write('debug', $entityTwo->getErrors());
        $result = $this->{{ name }}->save($entityTwo);

        $this->assertFalse($result);
        //$this->assertArrayHasKey('field_name', $entityTwo->getErrors());

{% endif %}

{% endif %}
    }
{% endfor %}

{%- if not methods %}
{%- if traitName or properties or fixtures or construction or methods %}

{% endif %}
    /**
     * Test initial setup
     *
     * @return void
     */
    public function testInitialization()
    {
        $this->markTestIncomplete('Not implemented yet.');
    }
{% endif %}

{% if isTable %}
    /**
     * _validDefault - creates entity successfully and returns
     *
     * @return void
     */
    protected function _validDefault()
    {
        Log::write('debug', 'inside {{ className }}  _validDefault');
        // test valid entity
        $data = [

       ];
       $entity = $this->{{ name }}->newEntity(
           $data,
           [
               'fields' => array_keys($data)
           ]
       );
       Log::write('debug', 'errors next');
       Log::write('debug', $entity->getErrors());
       $this->assertEmpty($entity->getErrors()); // empty = no validation errors

       return $entity;
    }
{% endif %}

}
